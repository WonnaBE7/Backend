name: Spring Legacy CI/CD Pipeline

on:
  push:
    branches: [ main, feature/github-actions ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  WAR_NAME: 'wonnabe'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 Gradle Wrapper 권한 설정
        run: chmod +x ./gradlew

      # H2 인메모리 DB 사용 (별도 설정 불필요)
      # - name: 🗄️ MySQL 서비스 시작
      #   run: |
      #     sudo systemctl start mysql.service
      #     mysql -e "CREATE DATABASE IF NOT EXISTS wonnabe_test;" -uroot -proot

      # 단계별 테스트 실행 (실패해도 계속 진행)
      - name: 🧪 단위 테스트 실행
        run: ./gradlew test --no-daemon --continue || true
        continue-on-error: true

      - name: 📊 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    # 테스트 실패해도 빌드는 진행
    if: always()

    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 Gradle Wrapper 권한 설정
        run: chmod +x ./gradlew

      - name: 🏗️ 프로젝트 빌드 (테스트 제외)
        run: ./gradlew clean build war -x test --no-daemon

      - name: 📤 WAR 파일 업로드
        uses: actions/upload-artifact@v4
        with:
          name: war-file
          path: build/libs/*.war

  deploy:
    needs: [ test, build-and-deploy ]
    runs-on: ubuntu-latest
    # feature 브랜치에서도 배포 테스트 (임시)
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/github-actions') && github.event_name == 'push'

    steps:
      - name: 📥 WAR 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: war-file
          path: ./

      - name: 🔧 연결 테스트
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 5m
          script: |
            echo "🎉 연결 테스트 성공!"
            echo "현재 사용자: $(whoami)"
            echo "현재 경로: $(pwd)"
            echo "현재 시간: $(date)"
            echo "Java 버전:"
            java -version
            echo "Tomcat 상태:"
            sudo systemctl status tomcat --no-pager
            echo "EC2 호스트명:"
            hostname
            echo "디스크 사용량:"
            df -h | head -5