name: Spring Legacy CI/CD Pipeline

on:
  push:
    branches: [ main, feature/github-actions ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  WAR_NAME: 'wonnabe'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 Gradle Wrapper 권한 설정
        run: chmod +x ./gradlew

      - name: 🧪 단위 테스트 실행
        run: ./gradlew test --no-daemon --continue || true
        continue-on-error: true

      - name: 📊 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📥 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🔧 Gradle Wrapper 권한 설정
        run: chmod +x ./gradlew

      - name: 🏗️ 프로젝트 빌드 (테스트 제외)
        run: ./gradlew clean build war -x test --no-daemon

      - name: 📤 WAR 파일 업로드
        uses: actions/upload-artifact@v4
        with:
          name: war-file
          path: build/libs/*.war

  deploy:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/github-actions') && github.event_name == 'push'

    steps:
      - name: 📥 WAR 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: war-file
          path: ./

      - name: 🔧 서버 준비 및 백업
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🚀 배포 시작: $(date)"
            
            # 백업 디렉토리 생성
            sudo mkdir -p ${{ secrets.TOMCAT_PATH }}/backup
            
            # 현재 실행 중인 버전 확인 및 백업
            if [ -f "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war" ]; then
              BACKUP_NAME="ROOT-$(date +%Y%m%d_%H%M%S).war"
              sudo cp "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war" \
                     "${{ secrets.TOMCAT_PATH }}/backup/$BACKUP_NAME"
              echo "✅ 백업 완료: $BACKUP_NAME"
              echo "$BACKUP_NAME" > ~/last_backup.txt
            else
              echo "📝 기존 WAR 파일 없음"
              echo "none" > ~/last_backup.txt
            fi
            
            # Tomcat 중지
            echo "🛑 Tomcat 중지..."
            sudo systemctl stop tomcat
            
            # Tomcat 완전 중지 확인
            while sudo systemctl is-active --quiet tomcat; do
              echo "⏳ Tomcat 중지 대기 중..."
              sleep 2
            done
            echo "✅ Tomcat 완전 중지됨"
            
            # 기존 파일 제거 (ROOT 애플리케이션)
            sudo rm -f "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war"
            sudo rm -rf "${{ secrets.TOMCAT_PATH }}/webapps/ROOT/"
            
            # work 디렉토리도 정리 (캐시된 클래스 파일 제거)
            sudo rm -rf "${{ secrets.TOMCAT_PATH }}/work/Catalina/localhost/ROOT/"
            
            # 임시 폴더 생성
            mkdir -p ~/deploy

      - name: 📤 WAR 파일 서버 전송
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "*.war"
          target: "/home/${{ secrets.EC2_USERNAME }}/deploy/"

      - name: 🚀 새 버전 배포 및 시작
        id: deploy_new_version
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # WAR 파일을 ROOT로 이동
            sudo mv "/home/${{ secrets.EC2_USERNAME }}/deploy/"*.war \
                   "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war"
            
            # 권한 설정
            sudo chown tomcat:tomcat "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war"
            
            # Tomcat 시작
            echo "🚀 Tomcat 시작..."
            sudo systemctl start tomcat
            
            # 시작 확인 (30초 대기)
            echo "⏳ 30초 대기 후 확인..."
            sleep 30
            
            if sudo systemctl is-active --quiet tomcat; then
              echo "✅ Tomcat 정상 시작됨"
              echo "📋 최근 Tomcat 로그:"
              sudo tail -20 "${{ secrets.TOMCAT_PATH }}/logs/catalina.out"
            else
              echo "❌ Tomcat 시작 실패"
              echo "📋 에러 로그:"
              sudo tail -50 "${{ secrets.TOMCAT_PATH }}/logs/catalina.out"
              exit 1
            fi
            
            # 포트 확인
            if netstat -tln | grep -q ":8080 "; then
              echo "✅ 포트 8080 정상 리스닝 중"
            else
              echo "❌ 포트 8080 리스닝하지 않음"
              exit 1
            fi
            
            echo "🎉 배포 완료!"

      - name: 🔄 롤백 (배포 실패 시)
        if: failure() && steps.deploy_new_version.outcome == 'failure'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "🔄 롤백 시작..."
            
            # Tomcat 중지
            sudo systemctl stop tomcat
            
            # 완전 중지 확인
            while sudo systemctl is-active --quiet tomcat; do
              sleep 2
            done
            
            # 현재 WAR 파일 제거
            sudo rm -f "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war"
            sudo rm -rf "${{ secrets.TOMCAT_PATH }}/webapps/ROOT/"
            sudo rm -rf "${{ secrets.TOMCAT_PATH }}/work/Catalina/localhost/ROOT/"
            
            # 백업 파일 복원
            BACKUP_FILE=$(cat ~/last_backup.txt)
            if [ "$BACKUP_FILE" != "none" ] && [ -f "${{ secrets.TOMCAT_PATH }}/backup/$BACKUP_FILE" ]; then
              sudo cp "${{ secrets.TOMCAT_PATH }}/backup/$BACKUP_FILE" \
                     "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war"
              sudo chown tomcat:tomcat "${{ secrets.TOMCAT_PATH }}/webapps/ROOT.war"
              echo "✅ 이전 버전으로 롤백 완료: $BACKUP_FILE"
            else
              echo "📝 롤백할 이전 버전이 없습니다"
            fi
            
            # Tomcat 재시작
            sudo systemctl start tomcat
            sleep 15
            
            if sudo systemctl is-active --quiet tomcat; then
              echo "✅ 롤백 후 Tomcat 정상 실행"
            else
              echo "❌ 롤백 후에도 Tomcat 실행 실패"
            fi

      - name: 🧹 정리 작업
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 임시 파일 정리
            rm -rf "/home/${{ secrets.EC2_USERNAME }}/deploy"
            rm -f ~/last_backup.txt
            
            # 오래된 백업 파일 정리 (7일 이상된 것들)
            find "${{ secrets.TOMCAT_PATH }}/backup" -name "ROOT-*.war" -mtime +7 -delete 2>/dev/null || true
            
            echo "🧹 정리 완료"

      - name: 📧 이메일 알림 전송
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ job.status == 'success' && '✅ 배포 성공' || '🚨 배포 실패' }} - ${{ github.repository }}
          body: |
            🚀 CI/CD 배포 결과 알림
            
            📊 배포 결과: ${{ job.status }}
            🌿 브랜치: ${{ github.ref_name }}
            📝 커밋: ${{ github.sha }}
            👤 배포자: ${{ github.actor }}
            📅 시간: $(date)
            
            🔗 상세 로그 확인: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ${{ job.status == 'success' && '✅ 배포가 성공적으로 완료되었습니다!' || '❌ 배포에 실패했습니다. 자동 롤백이 수행되었습니다.' }}
          to: starr075@gmail.com
          from: Wonnabe CI/CD Bot <noreply@wonnabe.com>

      - name: 🎉 배포 성공 알림
        if: success()
        run: |
          echo "🎉 배포 성공!"
          echo "📅 배포 시간: $(date)"
          echo "🌿 브랜치: ${{ github.ref_name }}"
          echo "📝 커밋: ${{ github.sha }}"
          echo "👤 배포자: ${{ github.actor }}"

      - name: 🚨 배포 실패 알림
        if: failure()
        run: |
          echo "🚨 배포 실패!"
          echo "📅 실패 시간: $(date)"
          echo "🌿 브랜치: ${{ github.ref_name }}"
          echo "📝 커밋: ${{ github.sha }}"
          echo "👤 시도자: ${{ github.actor }}"
          echo "🔄 롤백이 자동으로 수행되었습니다."