<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wonnabe.product.mapper.CardMapper">

    <!--  사용자가 신청한 카드 등록  -->
    <insert id="insertUserCard">
        <selectKey resultType="Long" keyProperty="id" keyColumn="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

        INSERT INTO User_Card (user_id, product_id, issue_date, expiry_date,
                               performance_condition, card_number, account_id)
        VALUES (#{userId}, #{productId}, #{issueDate}, #{expiryDate},
                #{performanceCondition}, #{cardNumber}, #{accountId})
    </insert>

    <!--  사용자 보유 카드 목록 최신화  -->
    <update id="updateUserCardInfo">
        UPDATE User_Info
        SET my_card_ids =
                CASE
                    WHEN JSON_VALID(my_card_ids) = 0 OR my_card_ids IS NULL THEN JSON_ARRAY(#{cardId})
                    ELSE JSON_ARRAY_APPEND(my_card_ids, '$', CAST(#{cardId} AS UNSIGNED))
                    END
        WHERE user_id = #{userId}
    </update>

    <!--  특정 카드 상품 정보 조회  -->
    <select id="findById" resultType="CardProductVO">
        SELECT *
        from card_product
        where product_id = #{productId}
    </select>

    <!--  사용자가 등록한 카드 정보 조회  -->
    <select id="findUserCardByproductId" resultType="UserCardVO">
        SELECT *
        FROM User_Card
        WHERE product_id = #{productId} and user_id = #{userId}
    </select>

    <!-- resultMap 정의 -->
    <resultMap id="userCardWithConsumptionsMap" type="UserCardDTO">
        <id property="id" column="id"/>
        <result property="userId" column="user_id" javaType="java.lang.String"/>
        <result property="productId" column="product_id"/>
        <result property="monthlyUsage" column="monthly_usage"/>
        <result property="issueDate" column="issue_date"/>
        <result property="expiryDate" column="expiry_date"/>
        <result property="performanceCondition" column="performance_condition"/>
        <result property="cardNumber" column="card_number"/>
        <result property="cardName" column="card_name"/>
        <result property="cardCompany" column="card_company"/>

        <collection property="consumptions" ofType="com.wonnabe.product.dto.MonthlyConsumptionDTO">
            <result property="month" column="month"/>
            <result property="amount" column="amount"/>
        </collection>
    </resultMap>

    <!--  사용자가 보유한 카드 상세 정보 조회  -->
    <select id="findUserCardDetailById" resultMap="userCardWithConsumptionsMap">
        WITH RECURSIVE months AS (
        SELECT DATE_FORMAT(DATE_FORMAT(CURDATE(), '%Y-%m-01'), '%Y-%m') AS ym, 1 AS n
        UNION ALL
        SELECT DATE_FORMAT(DATE_SUB(DATE_FORMAT(CURDATE(), '%Y-%m-01'), INTERVAL n MONTH), '%Y-%m'), n + 1
        FROM months
        WHERE n &lt; 5
        ),
        txn AS (
        SELECT
        uc.id AS uc_id,
        DATE_FORMAT(ct.transaction_date, '%Y-%m') AS ym,
        ABS(SUM(ct.amount)) AS amount
        FROM user_card uc
        LEFT JOIN card_transactions ct
        ON ct.card_id = uc.id
        AND ct.amount &lt; 0
        AND ct.transaction_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 4 MONTH), '%Y-%m-01')
        WHERE uc.user_id = #{userId}
        AND uc.product_id = #{productId}
        GROUP BY uc.id, DATE_FORMAT(ct.transaction_date, '%Y-%m')
        )
        SELECT
        uc.id,
        uc.user_id,
        uc.product_id,
        uc.monthly_usage,
        uc.issue_date,
        uc.expiry_date,
        uc.performance_condition,
        uc.card_number,
        cp.card_name,
        cp.card_company,
        m.ym AS month,
        IFNULL(t.amount, 0) AS amount
        FROM user_card uc
        JOIN card_product cp ON uc.product_id = cp.product_id
        CROSS JOIN months m
        LEFT JOIN txn t ON t.uc_id = uc.id AND t.ym = m.ym
        WHERE uc.user_id = #{userId}
        AND uc.product_id = #{productId}
        ORDER BY m.ym DESC
    </select>


    <select id="getAccountId" resultType="java.lang.Long">
        SELECT id FROM User_Accounts
        WHERE account_number = #{accountNumber}
        and user_id = #{userId}
    </select>

    <select id="getMyCardIdsJson" resultType="java.lang.String">
        SELECT my_card_ids
        FROM user_info
        WHERE user_id = #{userId}
    </select>

    <select id="findLastCardNumber" resultType="java.lang.String">
        SELECT card_number
        FROM User_Card
        WHERE card_number NOT LIKE '%*%'
        ORDER BY id DESC
        LIMIT 1
    </select>
    <!-- 카드 추천에 필요한 사용자 정보 조회 -->
    <select id="findUserInfoForCardRecommend" resultType="UserInfoForCardDTO">
        SELECT
            ui.user_id,
            ui.income_annual_amount,
            ui.selected_wonnabe_ids,
            ui.my_card_ids,
            MAX(card_usage.previous_consumption) AS previous_consumption
        FROM user_info ui
                 LEFT JOIN (
            SELECT
                uc.user_id,
                ct.card_id,
                ABS(SUM(ct.amount)) AS previous_consumption
            FROM user_card uc
                     JOIN card_transactions ct
                         ON uc.id = ct.card_id
                         AND ct.amount &lt; 0
            WHERE MONTH(ct.transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH)
              AND YEAR(ct.transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)
            GROUP BY uc.user_id, ct.card_id
        ) AS card_usage ON ui.user_id = card_usage.user_id
        WHERE ui.user_id = #{userId}
        GROUP BY ui.user_id, ui.income_annual_amount
    </select>

    <!-- 모든 카드 상품 목록 조회 -->
    <select id="findAllCardProducts" resultType="CardProductVO">
        SELECT *
        FROM card_product
    </select>

    <!-- 사용자가 보유 중인 카드의 상품 번호 조회 -->
    <select id="findProductIdsByUserCardIds" resultType="java.lang.Long">
        SELECT DISTINCT product_id
        FROM user_card
        WHERE id IN
        <foreach collection="userCardIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 사용자가 보유 중인 카드의 상품 번호 조회 -->
    <select id="findProductIdsByUserId" resultType="java.lang.Long">
        SELECT product_id
        FROM user_card
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자가 보유 중인 카드의 상품 조회 -->
    <select id="findProductsByIds" resultType="CardProductVO">
        SELECT *
        FROM Card_Product
        WHERE product_id IN
        <foreach item="id" collection="productIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>


    <select id="findBasicUserInfoById" resultType="BasicUserInfoDTO">
        SELECT
            ui.user_id,
            ui.income_annual_amount,
            ui.favorite_products_by_type,
            ui.nowme_id,
            ui.income_source_type,
            ui.income_employment_status,
            ui.lifestyle_smoking AS smokingStatus,
            ui.lifestyle_family_medical AS familyMedicalHistory,
            ui.lifestyle_before_diseases AS pastMedicalHistory,
            ui.lifestyle_exercise_freq AS exerciseFrequency,
            ui.lifestyle_alcohol_freq AS drinkingFrequency,
            MAX(card_usage.previous_consumption) AS previousConsumption
        FROM user_info ui
                 LEFT JOIN (
            SELECT
                uc.user_id,
                ABS(SUM(ct.amount)) AS previous_consumption
            FROM user_card uc
                     JOIN card_transactions ct
                         ON uc.id = ct.card_id
                         AND ct.amount &lt; 0
            WHERE MONTH(ct.transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH)
              AND YEAR(ct.transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)
            GROUP BY uc.id
        ) AS card_usage ON ui.user_id = card_usage.user_id
        WHERE ui.user_id = #{userId}
        GROUP BY ui.user_id, ui.income_annual_amount, ui.nowme_id, ui.favorite_products_by_type
    </select>


</mapper>